# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-uOsK3-u4o_3Q8SDeZN1VgQ9W91_JWGt
"""

pip install streamlit

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import yfinance as yf
import numpy as np
import streamlit as st
import pickle
from datetime import datetime

end_date = datetime.now().strftime('%Y-%m-%d')

# Mengunduh data saham hingga tanggal hari ini
arto = yf.download("ARTO.JK", start="2016-01-12", end=end_date)
bank = yf.download("BANK.JK", start="2021-02-01", end=end_date)
bbca = yf.download("BBCA.JK", start="2014-04-21", end=end_date)
bbri = yf.download("BBRI.JK", start="2014-04-21", end=end_date)
bbni = yf.download("BBNI.JK", start="2014-04-21", end=end_date)
bbtn = yf.download("BBTN.JK", start="2014-04-21", end=end_date)
bbyb = yf.download("BBYB.JK", start="2015-01-13", end=end_date)
mega = yf.download("MEGA.JK", start="2014-04-21", end=end_date)
bmri = yf.download("BMRI.JK", start="2014-04-21", end=end_date)
bris = yf.download("BRIS.JK", start="2018-05-09", end=end_date)
bnga = yf.download("BNGA.JK", start="2014-04-21", end=end_date)
nisp = yf.download("NISP.JK", start="2014-04-21", end=end_date)

# Fungsi untuk membuat lagged features
def LaggedFeatures(s, lag=2, fillna=True, dropna=False):
    if isinstance(s, pd.DataFrame):
        new_dict = {}
        for col_name in s.columns:
            new_dict[col_name] = s[col_name]
            for l in range(1, lag + 1):
                new_dict[f'{col_name}_lag{str(l)}'] = s[col_name].shift(l)
        res = pd.DataFrame(new_dict, index=s.index)
    elif isinstance(s, pd.Series):
        the_range = range(lag + 1)
        res = pd.concat([s.shift(i) for i in the_range], axis=1)
        res.columns = [f'lag_{str(i)}' for i in the_range]
    else:
        print('Only works for DataFrame or Series')
        return None
    if fillna:
        res = res.fillna(method='bfill')
    if dropna:
        res = res.dropna()
    return res

# Fungsi untuk melatih model dan menyimpan hasil prediksi serta metrik evaluasi
def train_and_save_model(data, column_name, lag, cutoff_date, model_filename):
    if 'Close' in data.columns and data['Close'].equals(data[column_name]):
        data = data.drop(columns=['Close'])

    lagged_data = LaggedFeatures(data, lag=lag, dropna=True)
    lagged_data.index = pd.to_datetime(lagged_data.index)
    cutoff = pd.to_datetime(cutoff_date)

    train_data = lagged_data[lagged_data.index < cutoff]
    test_data = lagged_data[lagged_data.index >= cutoff]

    X_train = train_data.drop([column_name], axis=1)
    X_test = test_data.drop([column_name], axis=1)
    y_train = train_data[[column_name]]
    y_test = test_data[[column_name]]

    X_train = X_train.astype(float).values
    y_train = y_train.astype(float).values
    X_test = X_test.astype(float).values
    y_test = y_test.astype(float).values

    regressor = LinearRegression()
    regressor.fit(X_train, y_train)

    with open(model_filename, 'wb') as file:
        pickle.dump(regressor, file)

    predicted = regressor.predict(X_test)

    y_test_1d = y_test.flatten()
    predicted_1d = predicted.flatten()
    dates = test_data.index

    df_results = pd.DataFrame({"Date": dates, "Actual": y_test_1d, "Predicted": predicted_1d})
    df_results.set_index('Date', inplace=True)
    df_results['Pct Change'] = df_results['Predicted'].pct_change()

    mae = mean_absolute_error(y_test_1d, predicted_1d)
    mse = mean_squared_error(y_test_1d, predicted_1d)
    r2 = r2_score(y_test_1d, predicted_1d)

    metrics = pd.DataFrame({'MAE': [mae], 'MSE': [mse], 'R2': [r2]})
    return df_results, metrics

# Fungsi untuk menggabungkan hasil prediksi dari semua saham dan menghitung rata-rata Pct Change
def analyze_best_stocks(stock_data_dict):
    all_results = pd.DataFrame()
    for stock_name, (df_results, _) in stock_data_dict.items():
        df_results['Stock'] = stock_name
        all_results = pd.concat([all_results, df_results])

    # Group by Stock and calculate mean Pct Change
    mean_pct_change = all_results.groupby('Stock')['Pct Change'].mean().sort_values(ascending=False)

    return mean_pct_change.head(5)

# Contoh penggunaan fungsi
data_arto, metrics_arto = train_and_save_model(arto, 'Adj Close', 1, '2023-05-01', 'model_arto.pkl')
data_bank, metrics_bank = train_and_save_model(bank, 'Adj Close', 1, '2023-05-01', 'model_bank.pkl')
data_bbca, metrics_bbca = train_and_save_model(bbca, 'Adj Close', 1, '2023-05-01', 'model_bbca.pkl')
data_bbri, metrics_bbri = train_and_save_model(bbri, 'Adj Close', 1, '2023-05-01', 'model_bbri.pkl')
data_bbni, metrics_bbni = train_and_save_model(bbni, 'Adj Close', 1, '2023-05-01', 'model_bbni.pkl')
data_bbtn, metrics_bbtn = train_and_save_model(bbtn, 'Adj Close', 1, '2023-05-01', 'model_bbtn.pkl')
data_bbyb, metrics_bbyb = train_and_save_model(bbyb, 'Adj Close', 1, '2023-05-01', 'model_bbyb.pkl')
data_mega, metrics_mega = train_and_save_model(mega, 'Adj Close', 1, '2023-05-01', 'model_mega.pkl')
data_bmri, metrics_bmri = train_and_save_model(bmri, 'Adj Close', 1, '2023-05-01', 'model_bmri.pkl')
data_bris, metrics_bris = train_and_save_model(bris, 'Adj Close', 1, '2023-05-01', 'model_bris.pkl')
data_bnga, metrics_bnga = train_and_save_model(bnga, 'Adj Close', 1, '2023-05-01', 'model_bnga.pkl')
data_nisp, metrics_nisp = train_and_save_model(nisp, 'Adj Close', 1, '2023-05-01', 'model_nisp.pkl')

# Gabungkan hasil dari semua saham
stock_data_dict = {
    'ARTO': (data_arto, metrics_arto),
    'BANK': (data_bank, metrics_bank),
    'BBCA': (data_bbca, metrics_bbca),
    'BBRI': (data_bbri, metrics_bbri),
    'BBNI': (data_bbni, metrics_bbni),
    'BBTN': (data_bbtn, metrics_bbtn),
    'BBYB': (data_bbyb, metrics_bbyb),
    'MEGA': (data_mega, metrics_mega),
    'BMRI': (data_bmri, metrics_bmri),
    'BRIS': (data_bris, metrics_bris),
    'BNGA': (data_bnga, metrics_bnga),
    'NISP': (data_nisp, metrics_nisp)
}

top_5_stocks = analyze_best_stocks(stock_data_dict)
print(top_5_stocks)

# Simpan objek top_5_stocks ke file pickle
with open('top_5_stocks.pkl', 'wb') as f:
    pickle.dump(top_5_stocks, f)

import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np
import streamlit as st
import pickle

# Muat objek top_5_stocks dari file pickle
with open('top_5_stocks.pkl', 'rb') as f:
    top_5_stocks = pickle.load(f)

st.title("Portofolio Optimal")
# Fungsi untuk mengunduh data harga saham
def download_stock_data(tickers, start_date, end_date):
    data = yf.download(tickers, start=start_date, end=end_date)['Adj Close']
    return data

# Unduh data harga saham untuk top 5 saham
start_date = '2023-05-01'
end_date = datetime.now().strftime('%Y-%m-%d')
tickers = [f'{ticker}.JK' for ticker in top_5_stocks.index]
stock_data = download_stock_data(tickers, start_date, end_date)

# Fungsi untuk mengunduh data harga saham
def download_stock_data(tickers, start_date, end_date):
    data = yf.download(tickers, start=start_date, end=end_date)['Adj Close']
    return data

# Fungsi untuk menghitung bobot portofolio berdasarkan top 5 saham
def calculate_portfolio_weights(top_5_stocks):
    total_pct_change = top_5_stocks.sum()
    weights = top_5_stocks / total_pct_change
    return weights

# Unduh data harga saham untuk top 5 saham
start_date = '2023-05-01'
end_date = datetime.now().strftime('%Y-%m-%d')
tickers = [f'{ticker}.JK' for ticker in top_5_stocks.index]
stock_data = download_stock_data(tickers, start_date, end_date)

# Hitung pengembalian harian
returns = stock_data.pct_change().dropna()

# Menghitung bobot portofolio optimal
W = calculate_portfolio_weights(top_5_stocks)

# Konversi W menjadi numpy array untuk perhitungan
W = W.values

# Hitung pengembalian harian portofolio
portfolio_returns = returns.dot(W)

# Hitung cumulative return
cumul_ret = (returns + 1).cumprod() - 1

# Hitung cumulative portfolio return
pf_cumul_ret = (portfolio_returns + 1).cumprod() - 1

# Unduh indeks pasar
benchmark=yf.download("^JKLQ45",start=start_date)['Adj Close']  # Indeks LQ45 sebagai pasar)
bench_ret=benchmark.pct_change()
bench_dev=(bench_ret+1).cumprod()

# Menghitung matriks kovarian dari returns
cov_matrix = returns.cov()

# Menghitung standar deviasi portofolio
pf_std = np.sqrt(W.dot(cov_matrix).dot(W))

st.subheader("Portofolio vs Index Development")
tog=pd.concat([bench_dev,pf_cumul_ret],axis=1)
tog.columns= ['LQ45 Performance', 'Portofolio Performance']

st.subheader("Portofolio Risk:")
pf_std

st.subheader("Benchmark Risk:")
bench_risk=bench_ret.std()
bench_risk

st.subheader("Portofolio Composition:")
fig,ax=plt.subplots(facecolor='#121212')
ax.pie(W, labels=tickers, autopct='%1.1f%%', textprops={'color':'white'})

st.pyplot(fig)